// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Expo                    = require("expo");
var Block                   = require("bs-platform/lib/js/block.js");
var Helpers$BsExpo          = require("./helpers.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function _to_string(param) {
  var exit = 0;
  switch (param) {
    case 0 : 
        return Expo.Permissions.NOTIFICATIONS;
    case 1 : 
        return Expo.Permissions.LOCATION;
    case 2 : 
        return Expo.Permissions.CAMERA;
    case 3 : 
    case 4 : 
    case 5 : 
        exit = 1;
        break;
    
  }
  if (exit === 1) {
    throw [
          Caml_builtin_exceptions.match_failure,
          [
            "/Users/rabbit/p/forks/bs-expo/src/permissions.re",
            19,
            2
          ]
        ];
  }
  
}

function get(permission) {
  var perm = _to_string(permission);
  var missingKey = function (v) {
    throw [
          Helpers$BsExpo.MissingFieldShouldExist,
          "scope",
          "Error: " + (String(v) + "")
        ];
  };
  return Expo.Permissions.getAsync(perm).then((function (r) {
                  var match = r.ios;
                  var tmp;
                  if (match !== undefined) {
                    var match$1 = match.scope;
                    var r$1;
                    switch (match$1) {
                      case "always" : 
                          r$1 = /* always */-958984497;
                          break;
                      case "whenInUse" : 
                          r$1 = /* whenInUse */-14259128;
                          break;
                      default:
                        r$1 = missingKey(match.scope);
                    }
                    tmp = /* Some */[/* record */[/* scope */r$1]];
                  } else {
                    tmp = /* None */0;
                  }
                  var match$2 = r.android;
                  var tmp$1;
                  if (match$2 !== undefined) {
                    var match$3 = match$2.scope;
                    var r$2;
                    switch (match$3) {
                      case "coarse" : 
                          r$2 = /* coarse */1061401711;
                          break;
                      case "fine" : 
                          r$2 = /* fine */-1011101638;
                          break;
                      case "none" : 
                          r$2 = /* none */-922086728;
                          break;
                      default:
                        r$2 = missingKey(match$2.scope);
                    }
                    tmp$1 = /* Some */[/* record */[/* scope */r$2]];
                  } else {
                    tmp$1 = /* None */0;
                  }
                  return Promise.resolve(/* Ok */Block.__(0, [/* record */[
                                  /* expires */r.expires,
                                  /* status */r.status,
                                  /* ios */tmp,
                                  /* android */tmp$1
                                ]]));
                })).catch((function (oops) {
                return Promise.resolve(/* Error */Block.__(1, [Helpers$BsExpo.errorToString(/* None */0, oops)]));
              }));
}

exports._to_string = _to_string;
exports.get        = get;
/* expo Not a pure module */
